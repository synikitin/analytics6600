<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Analytics 6600</title>
    <link>/index.xml</link>
    <description>Recent content on Data Analytics 6600</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Slava Nikitin</copyright>
    <lastBuildDate>Mon, 03 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Functions and Iteration</title>
      <link>/publication/program/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/program/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;learning-objectives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Learning Objectives&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Package loading&lt;/li&gt;
&lt;li&gt;Data import&lt;/li&gt;
&lt;li&gt;Data clean up&lt;/li&gt;
&lt;li&gt;Data manipulation&lt;/li&gt;
&lt;li&gt;Piping&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Data structures: vectors, lists, data frames&lt;/li&gt;
&lt;li&gt;Iteration&lt;/li&gt;
&lt;li&gt;Watson API services&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;context&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To practice programming concepts, we will use a data set from a kaggle competition. &lt;a href=&#34;renthop.com&#34; class=&#34;uri&#34;&gt;renthop.com&lt;/a&gt; is a service for listing and searching for apartments. For each apartment, there is information about the bedrooms, bathrooms, pricing, and interest level, based on how many views a listing got when it was opened. In addition to numerical data, there is also text describing features of an apartment and images showing the decor, data that will require special treatment and provide new learning opportunities.&lt;/p&gt;
&lt;p&gt;How much interest will a new rental listing on RentHop receive? This question motivates the competition, and will guide this assignment, which involves data import, clean up, manipulation, interacting with an api, assisted by functions and iteration.&lt;/p&gt;
&lt;!-- the second part will cover predictive modeling that will involve taking all variables we have and using them to predict interest level to figure what makes for a good rental listing. --&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Import&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Start by creating a project folder. Use the dataset link to obtain data; then move it to your project folder. Data is somewhat large, and has been compressed with zip algorithm. Assuming you moved downloaded data to your project folder, use the following R code to unzip it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unzip(&amp;quot;test.json.zip&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the code does not work, do it manually with &lt;a href=&#34;http://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; on Windows or Archive Utility on Mac. Once you unzipped the file, you should see a test.json file in your project folder - make sure you do before proceeding. .json file is a popular storage format to transport data over the internet, and requires a special package and function to import it into R. Run the following commands to get the required package and load it,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;jsonlite&amp;quot;)
library(jsonlite)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then run the following command to read the data into R,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;train_raw &amp;lt;- fromJSON(&amp;quot;train.json&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fromJSON&lt;/code&gt; and &lt;strong&gt;jsonlite&lt;/strong&gt; are similar to &lt;code&gt;read_csv&lt;/code&gt; and &lt;strong&gt;readr&lt;/strong&gt; in that they import data into R, but address different formats.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-cleanup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Cleanup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You should see a pretty large list. Explore it using these commands,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typeof(train_raw)
names(train_raw)
str(train_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While &lt;code&gt;fromJSON&lt;/code&gt; created a list, our data can be conveniently stored as a data frame, with each row being a listing and each column being some part of that listing. The only novel aspect of this data is how to handle &lt;strong&gt;features&lt;/strong&gt; and &lt;strong&gt;photos&lt;/strong&gt; because unlike standard column that have a single value per cell, apartment listings can have multiple features or photos, hence we need to somehow store a vector of multiple values in a single cell of a data frame.&lt;/p&gt;
&lt;p&gt;Recall that data frames are made out of lists, and that lists can have lists inside of them and that components of a list can be vectors with multiple values of the same type. This means that a data frame can have a list column and allows us to store multiple features and photo urls in a single cell of a data frame.&lt;/p&gt;
&lt;p&gt;Apply &lt;code&gt;as_tibble&lt;/code&gt; and then structure of data to see that it is tabular. Next task is to fix types of columns. Most of the columns are list type, but should be integer or character. Write &lt;code&gt;for&lt;/code&gt; loop code to modify the tibble by iterating over columns and applying &lt;code&gt;unlist&lt;/code&gt; to all the columns but features and photos. Fill in the missing pieces of the &lt;code&gt;for&lt;/code&gt; loop to carry this out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (sequence) {
  code
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next task is to combine features for a given apartment into a single string. For this we need to iterate over the cell values of the &lt;strong&gt;features&lt;/strong&gt; column. Some values are empty and others contain one or more strings. If a value is empty, then we need to replace empty values with some default string like “nothing”, otherwise collapse strings into a single string separated by a space. For this you will need to create a function that takes a list, loops over its components, replacing the value of a component if its length is 0 and applying &lt;code&gt;str_c&lt;/code&gt; function from &lt;strong&gt;stringr&lt;/strong&gt; package. Here is a logical skeleton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func &amp;lt;- function(arguments) {
  for (sequence) {
    if (length is 0) replace with &amp;quot;nothing&amp;quot;
    collapse values into a single value
  }
  apply lower case transformation
  replace all symbols that are not english characters with empty space
  return value
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After finishing this funciton, modify your data frame inside &lt;code&gt;mutate&lt;/code&gt; with it. Next, we will examine what could be done with photo urls.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ibm-image-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;IBM Image Analysis&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this part will further pratice function writing and iteration by downloading the photos using the urls and then sending them for object analysis to IBM. &lt;strong&gt;photos&lt;/strong&gt; is a list column and each component is a vector of urls represented as strings. Install these packages before you go on:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)
install_github(&amp;quot;cbuscollaboratory/cognizer&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to create a function that can take a vector of urls, go to the url to download a photo and store it locally on your hard drive, then send all the images together to IBM for object analysis. Here is the logical skeleton:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func &amp;lt;- function(arguments) {
  create a vector of names for the images
  download images from urls with names you created above
  send these images to IBM using image_classify function from cognizer package
  return results of IBM analysis 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I created a free account to try this for everyone. IBM services are what is called APIs - application programming interfaces - which require an api key to interact with. Once you have the key, you can store it as a variable and pass it to your function.&lt;/p&gt;
&lt;p&gt;The daily limit is 250 images, so everyone can send ten or so as an exercise. Use this code to get ten random urls and apply your function to it. Dont forget to assign a name to your results, so you can examine it further.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;key &amp;lt;- &amp;quot;key goes here&amp;quot;
urls &amp;lt;- sample(unlist(df$photos), 10)
result &amp;lt;- func(urls, key)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results you get from IBM is a complicated, nested list. The last part is to iterate over the results, pulling out the information about classes and algorithm’s confidence scores and storing them in a list. To navigate through the list you will need to use a combination of names and positions of the components. Here is a logical skeleton of the problem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output &amp;lt;- vector()
for (sequence) {
  output &amp;lt;- results$name[[i]]$name[[i]]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Dont forget to put all your code into Rmarkdown and test that all of it runs without errors to produce an html file that contains your answers. Good luck!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Model</title>
      <link>/post/model/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/model/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;Modeling of data patterns is a broad and deep topic that we can barely scratch in an intro class. We will concentrate on a couple types of models, aiming at prediction, on how to visualize models, and how to check predictive accuracy. The primary package we will use is &lt;strong&gt;xgboost&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&#34;predictive-task&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Predictive task&lt;/h2&gt;
&lt;p&gt;We consider a situation when we have a data frame of data, with &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; rows and &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; columns. We identify one column as a response variable and treat other variables as predictors. In addition, we distinguish between quantitative variables, for example, time or salary or rate of return, and categorical variables, like political affiliation or gender or loan approval status. The later distinction is necessary to make good choices about what type of R data is appropriate for different types of information. This may require some data preparation, but ultimately all information will be stored as &lt;strong&gt;double&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given data and our choices about response / predictor variables, our task is to find a predictive function that takes values of predictors and returns a value close to the observed response variable. Here is how we formulate it mathematically.&lt;/p&gt;
&lt;p&gt;Lets consider a row &lt;span class=&#34;math inline&#34;&gt;\(i \in \{1, 2, \dots, n\}\)&lt;/span&gt; of a data frame, where one value is a response variable &lt;span class=&#34;math inline&#34;&gt;\(y_i \in \mathbb R\)&lt;/span&gt; and remaining values are predictors &lt;span class=&#34;math inline&#34;&gt;\(x_{i1}, x_{i2}, \dots, x_{ip-1} \in \mathbb R ^ {p-1}\)&lt;/span&gt;, hence accounting for the &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; columns. We assume&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;that &lt;span class=&#34;math inline&#34;&gt;\((y_i, x_{i1}, \dots, x_{ip-1})\)&lt;/span&gt; have been sampled independently from a probability distribution &lt;span class=&#34;math inline&#34;&gt;\(P(y, x_{1}, \dots, x_{p-1})\)&lt;/span&gt; that characterizes variation in each variable and dependencies among them, meaning data is representative,&lt;/li&gt;
&lt;li&gt;that there is a function &lt;span class=&#34;math inline&#34;&gt;\(g(x_{1}, \dots, x_{p-1})\)&lt;/span&gt; that provides a true description of how &lt;span class=&#34;math inline&#34;&gt;\(mean(y)\)&lt;/span&gt; dependends on predictors, meaning there is a dependency of response on predictors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two assumptions are theoretical. To attempt to solve the problem, we also need practical assumptions that we are in control of and are primary components of what makes up a predictive model methodology: - that we can define a set of possible models, &lt;span class=&#34;math inline&#34;&gt;\(\{f(x_{1}, \dots, x_{p-1}, \theta) : \theta \in \Theta\ \subset \mathbb R\}\)&lt;/span&gt;, such that there is at least one function in a set of possible functions that approximates the true relationship, &lt;span class=&#34;math inline&#34;&gt;\(f(x_{1}, \dots, x_{p-1}, \theta ^ *)\)&lt;/span&gt;, meaning we can find an adequate model of the true relationship - that we can find a function to quantify overall predictive accuracy &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n L(y_i, f(x_{1}, \dots, x_{p-1}, \theta))\)&lt;/span&gt;, called a loss function, meaning we can quantify discrepancy between truth and approximation - that we can obtain an estimation algorithm that searches through the possible values of &lt;span class=&#34;math inline&#34;&gt;\(\theta \in \Theta\)&lt;/span&gt;, which modifies how response variable and predictors are related, so that we can maximize overall predictive accuracy, meaning we can solve &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{argmin}_{\theta \in \Theta}\ L(\theta)\)&lt;/span&gt; within computational, statistical, and organizational constraints - that we can come up with an interpretable metric of accuracy to characterize our model, meaning we can summarise how well it does, compare it to other models and communicate it to someone else&lt;/p&gt;
&lt;p&gt;The above points are very general, and we need to specify some details to actually make this doable. First, we are going to use a set of functions and an estimation algorithm offered by package &lt;code&gt;xgboost&lt;/code&gt;, which iteratively builds step-wise functions, called trees, and combines them by averaging their outputs. We could consider other function sets like planes, quadratics, exponential curves, but all of these are very restrained and it becomes harder to manually put these together in a multivariate case, so we will just rely on a very general set of function from &lt;code&gt;xgboost&lt;/code&gt; that can approximate any of those and more.&lt;/p&gt;
&lt;p&gt;Secondly, we are going to use mean squared error to quantify mean predictive error of a model that predicts a quantitative response, defined as &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{\frac{1}{n}\sum_{i = 1}^n(y_i - f(x_{1}, \dots, x_{p-1}, \theta))^2}\)&lt;/span&gt;, and misclassification rate for a categorical response, defined as &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n}\sum_{i = 1}^n \delta(y_i \neq f(x_{1}, \dots, x_{p-1}, \theta))\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(\delta(condition)\)&lt;/span&gt; is 1 if true and 0 if false.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;To follow along run these commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;xgboost&amp;quot;)
library(xgboost)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets look at some examples. &lt;strong&gt;mtcars&lt;/strong&gt; serves as a good example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mpg&lt;/strong&gt;, miles per gallon, is a quantitative variable while &lt;strong&gt;am&lt;/strong&gt;, status of automatic transmission, is categorical. Suppose &lt;strong&gt;mpg&lt;/strong&gt; is the response variable &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;, then our task is to estimate an unknown mathematical function &lt;span class=&#34;math inline&#34;&gt;\(g(x_{cyl}, x_{disp},...,x_{carb})\)&lt;/span&gt; that will take values of the other 10 variables in the table or similar values, and will output a predicted value of &lt;strong&gt;mpg&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(\hat y\)&lt;/span&gt; that is &lt;em&gt;close&lt;/em&gt; to the makes of cars we see in the table, but also close to new, unseen car makes, so &lt;span class=&#34;math inline&#34;&gt;\(\hat y \approx y\)&lt;/span&gt;. Outputs of &lt;span class=&#34;math inline&#34;&gt;\(f(\dots)\)&lt;/span&gt; will be quantitative, continuous, positive; this is called a regression model. If we are successful, then we can predict &lt;strong&gt;mpg&lt;/strong&gt; given values of the other variables.&lt;/p&gt;
&lt;p&gt;This expresses our choices about response and predictors:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;response &amp;lt;- &amp;quot;mpg&amp;quot;
preds &amp;lt;- setdiff(names(mtcars), response)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;xgboost&lt;/code&gt; has a special data structure &lt;code&gt;xgb.DMatrix&lt;/code&gt; to which we pass our variables:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- xgb.DMatrix(data = as.matrix(mtcars[preds]), label = mtcars[[response]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we estimate a predictive model. First we need to specify what kind of predictive problem is it, regression or classification?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;params &amp;lt;- list(objective = &amp;quot;reg:linear&amp;quot;, max.depth = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;&amp;quot;reg:linear&amp;quot;&lt;/code&gt; means regression, so predicting a quantitative response variable. We will see other &lt;em&gt;objective&lt;/em&gt; settings when doing classification. Then we can run the estimation algorithm to obtain a candidate model:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- xgboost(data, nrounds = 15, params = params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0]  train-rmse:14.931315
## [1]  train-rmse:10.956807
## [2]  train-rmse:8.086657
## [3]  train-rmse:6.014954
## [4]  train-rmse:4.524509
## [5]  train-rmse:3.452733
## [6]  train-rmse:2.699348
## [7]  train-rmse:2.160562
## [8]  train-rmse:1.783578
## [9]  train-rmse:1.530202
## [10] train-rmse:1.352115
## [11] train-rmse:1.221489
## [12] train-rmse:1.125132
## [13] train-rmse:1.050768
## [14] train-rmse:0.993811&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we have a model. How well does it do? This is a problem of diagnostics. We can use quantitative and visual methods to establish the predictive accuracy of our model. The important thing is to do model building and checking on different parts of a dataset, sometimes called train and test data. This way information for modeling and evaluating its accuracy is distinct. This is important for reducing or eliminating the bias that arises when you build a solution and then test it against the same data. Given that the solution is obtained by searching for a function that closely resembles patterns in the data, it should not be surprising if such a function shows high predictive accuracy - it was meant to.&lt;/p&gt;
&lt;p&gt;Luckily, &lt;code&gt;xgboost&lt;/code&gt; provides a special function to handle data partitions automatically. The technique is called &lt;strong&gt;cross-validation&lt;/strong&gt;. Data gets partitioned into non-overlapping subsets. A model is found for all but one subset and its accuracy is quantified against the held-out subset. This allows to control for bias in results. Then we repeat the same process by holding out a different dataset and estimating a model on the remaning. This is repeated until each dataset has served as a test dataset.&lt;/p&gt;
&lt;p&gt;Here is how you do it in &lt;code&gt;xgboost&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_check &amp;lt;- xgb.cv(data = data, nrounds = 15, params = params, 
                      nfold = 5, prediction = TRUE, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $dt
##     train.rmse.mean train.rmse.std test.rmse.mean test.rmse.std
##  1:       14.994247       0.590925      14.909984      3.097480
##  2:       11.072227       0.423146      10.925548      2.974110
##  3:        8.234335       0.286660       8.197776      2.774081
##  4:        6.169467       0.202543       6.208961      2.552080
##  5:        4.675557       0.150496       4.841571      2.428749
##  6:        3.589425       0.108938       3.922092      2.261225
##  7:        2.803943       0.093603       3.377539      2.106795
##  8:        2.238899       0.090968       3.063617      1.957420
##  9:        1.831239       0.100018       2.856681      1.801024
## 10:        1.542348       0.108157       2.758663      1.677425
## 11:        1.331137       0.115022       2.734206      1.562043
## 12:        1.175391       0.120495       2.728540      1.506692
## 13:        1.052263       0.117392       2.737890      1.455536
## 14:        0.959195       0.104982       2.702063      1.414629
## 15:        0.890466       0.104234       2.709136      1.387883
## 
## $pred
##  [1] 21.23776 20.54247 25.01806 18.48677 18.89520 17.93952 15.37514
##  [8] 25.30877 22.11276 18.41322 19.26246 15.75770 16.07236 16.07236
## [15] 15.20911 15.20911 11.32027 27.15747 30.78554 29.94482 25.53799
## [22] 18.45447 18.89520 15.28373 16.05636 30.86668 22.26302 21.12897
## [29] 15.67945 20.61279 15.28373 22.60438&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output of &lt;code&gt;xgb.cv&lt;/code&gt; contains summary statistics on train and test data, and also predictions on the hold-out data. In addition to summary statistics, we can also do a few visualizations of the full pattern of predictive accuracy.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot.ts(as.data.frame(model_check$dt)[,c(1, 3)], plot.type = &amp;quot;single&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/model_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt; The plot above shows mean predictive error in the model over training iterations. The gap between train and test shows the slight bias towards predicting train rather than test data. A good model should have both values low and not too far from each other.&lt;/p&gt;
&lt;p&gt;We can also examine residuals - observed minus predicted values - by plotting their histogram:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(mtcars$mpg - model_check$pred)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/model_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt; A good model should have this centered around 0.&lt;/p&gt;
&lt;p&gt;We can also check for a relationship between observed and predicted values. For a good model, these should be highly correlated:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mtcars$mpg, model_check$pred)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/model_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All the summary statistics and plots look pretty good. We can use the model we build to generate predictions, for old or new inputs. We would only need to convert data with the predictors into a &lt;code&gt;xgb.DMatrix&lt;/code&gt;. Here is an example using the predict function from base R on the full dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict(model, data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 20.28938 20.28938 22.15593 20.14867 17.01779 18.76633 14.85491
##  [8] 23.08412 22.15593 18.94006 18.94006 16.05549 16.05549 16.05549
## [15] 10.59728 10.59728 14.73103 30.88917 30.01993 32.20821 22.15593
## [22] 16.50219 16.53521 14.69125 17.01779 28.23297 25.88072 28.94273
## [29] 15.72165 20.09434 14.69125 22.15593&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, if we used &lt;strong&gt;am&lt;/strong&gt; as the response variable, which is categorical, the task is also to find a predictive function, with the only difference from &lt;strong&gt;mpg&lt;/strong&gt; is that the output should be categorical, perhapse 1 for automatic and 0 manual, and no other possible values. By outputing only a few categorical values is the reason why such a predictive function is often called a classifier.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;xgboost&lt;/code&gt; to solve this problem, too. Lets first setup our variables and data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;response &amp;lt;- &amp;quot;am&amp;quot;
preds &amp;lt;- setdiff(names(mtcars), response)

data &amp;lt;- xgb.DMatrix(data = as.matrix(mtcars[preds]), label = mtcars[[response]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The classification problem is different and requires a different way to capture a discrepancy between a candidate model and the underlying true function. Here we use &lt;code&gt;&amp;quot;binary:logistic&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;params &amp;lt;- list(objective = &amp;quot;binary:logistic&amp;quot;, max.depth = 2)
model &amp;lt;- xgboost(data, nrounds = 15, params = params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0]  train-error:0.093750
## [1]  train-error:0.062500
## [2]  train-error:0.031250
## [3]  train-error:0.031250
## [4]  train-error:0.031250
## [5]  train-error:0.031250
## [6]  train-error:0.031250
## [7]  train-error:0.031250
## [8]  train-error:0.031250
## [9]  train-error:0.031250
## [10] train-error:0.000000
## [11] train-error:0.031250
## [12] train-error:0.000000
## [13] train-error:0.031250
## [14] train-error:0.031250&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given our model, we once again ask how well it can do predict under new conditions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_check &amp;lt;- xgb.cv(data = data, nrounds = 15, params = params, 
                      nfold = 5, prediction = TRUE, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $dt
##     train.error.mean train.error.std test.error.mean test.error.std
##  1:         0.070154        0.016909        0.152381       0.175449
##  2:         0.054769        0.034771        0.185714       0.153751
##  3:         0.039077        0.027209        0.152381       0.175449
##  4:         0.039077        0.027209        0.185714       0.153751
##  5:         0.023692        0.021637        0.185714       0.153751
##  6:         0.031385        0.017561        0.185714       0.153751
##  7:         0.023692        0.021637        0.185714       0.153751
##  8:         0.023692        0.021637        0.185714       0.153751
##  9:         0.023692        0.021637        0.185714       0.153751
## 10:         0.015692        0.021495        0.185714       0.153751
## 11:         0.023692        0.021637        0.185714       0.153751
## 12:         0.015692        0.021495        0.185714       0.153751
## 13:         0.023692        0.021637        0.185714       0.153751
## 14:         0.023692        0.021637        0.185714       0.153751
## 15:         0.023692        0.021637        0.152381       0.175449
## 
## $pred
##  [1] 0.92728728 0.90635574 0.93324083 0.04087094 0.03606226 0.04217334
##  [7] 0.08039906 0.89858121 0.89858121 0.49988678 0.19096196 0.08440615
## [13] 0.06083688 0.05418482 0.06083688 0.05418482 0.10307471 0.87841910
## [19] 0.90354389 0.78469765 0.54893976 0.07726826 0.05943105 0.06083688
## [25] 0.06083688 0.88798708 0.90354389 0.92670751 0.27569479 0.92728728
## [31] 0.09309671 0.91976297&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot.ts(as.data.frame(model_check$dt)[,c(1, 3)], plot.type = &amp;quot;single&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/model_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When dealing with a classification problem, instead of residuals, it is typicaly to see which classes a model gets well, and how often, using what is called a confusion matrix. Basically, we count how many correct and incorrect predictions are made and put them into a table. Note that predictions from the model are actually probabilities, and to get a class prediction we need to threshold a probability. It is typical to use .5.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(pred = as.integer(model_check$pred &amp;gt; .5), obs = mtcars$am)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     obs
## pred  0  1
##    0 16  2
##    1  3 11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We the model can discriminate between automatic and manual pretty well, only confusing the two sometimes.&lt;/p&gt;
&lt;p&gt;This example showed a two-class prediction problem, but &lt;code&gt;xgboost&lt;/code&gt; can handle multi-class problem, too. We just need to adjust our parameters by setting objective argument by to &lt;code&gt;&amp;quot;multi:softmax&amp;quot;&lt;/code&gt; and &lt;code&gt;num_class&lt;/code&gt; to number of classes we are dealing with. Lastly, the classes should be represented with integers, starting from 0 and going to &lt;code&gt;num_class - 1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Program</title>
      <link>/post/program/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/program/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;pipe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pipe&lt;/h2&gt;
&lt;p&gt;The purpose behind pipes is to help simplify code that contains a chain of function calls by avoiding saving intermediate results. Here is data prep as an example:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;All tidyverse packages load the pipe by default, but &lt;strong&gt;magrittr&lt;/strong&gt; is the official package that contains it, and other operators as well.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(magrittr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data example is based on the second assignment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;u.data &amp;lt;- read_tsv(
  &amp;quot;u.data&amp;quot;,
  col_names = c(&amp;quot;user_id&amp;quot;, &amp;quot;movie_id&amp;quot;, &amp;quot;rating&amp;quot;, &amp;quot;timestamp&amp;quot;)
)
u.item &amp;lt;- read_delim(
  &amp;quot;u.item&amp;quot;,
  &amp;quot;|&amp;quot;,
  col_names = c(
&amp;quot;movie_id&amp;quot;, &amp;quot;movie_title&amp;quot;, &amp;quot;release_date&amp;quot;,
&amp;quot;video_release_date&amp;quot;, &amp;quot;IMDb_URL&amp;quot;, &amp;quot;unknown&amp;quot;,
&amp;quot;Action&amp;quot;, &amp;quot;Adventure&amp;quot;, &amp;quot;Animation&amp;quot;, &amp;quot;Children&amp;#39;s&amp;quot;,
&amp;quot;Comedy&amp;quot;, &amp;quot;Crime&amp;quot;, &amp;quot;Documentary&amp;quot;, &amp;quot;Drama&amp;quot;, &amp;quot;Fantasy&amp;quot;,
&amp;quot;Film-Noir&amp;quot;, &amp;quot;Horror&amp;quot;, &amp;quot;Musical&amp;quot;, &amp;quot;Mystery&amp;quot;, &amp;quot;Romance&amp;quot;,
&amp;quot;Sci-Fi&amp;quot;, &amp;quot;Thriller&amp;quot;, &amp;quot;War&amp;quot;, &amp;quot;Western&amp;quot;
)
  )
u.user &amp;lt;- read_delim(
  &amp;quot;u.user&amp;quot;,
  &amp;quot;|&amp;quot;,
  col_names = c(&amp;quot;user_id&amp;quot;, &amp;quot;age&amp;quot;, &amp;quot;gender&amp;quot;, &amp;quot;occupation&amp;quot;, &amp;quot;zip_code&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save each intermediate result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df1 &amp;lt;- inner_join(u.data, u.user, &amp;quot;user_id&amp;quot;)
df2 &amp;lt;- inner_join(df1, u.item, &amp;quot;movie_id&amp;quot;)
df3 &amp;lt;- mutate(df2,
timestamp = as_datetime(timestamp), 
release_date = dmy(release_date)
  ) 
df4 &amp;lt;- select(df3, -video_release_date)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overwrite each result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- inner_join(u.data, u.user, &amp;quot;user_id&amp;quot;)
df &amp;lt;- inner_join(df, u.item, &amp;quot;movie_id&amp;quot;)
df &amp;lt;- mutate(df,
timestamp = as_datetime(timestamp), 
release_date = dmy(release_date)
  ) 
df &amp;lt;- select(df, -video_release_date)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nest each result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- select(
  mutate(
inner_join(
  inner_join(
    u.data,
    u.user,
    &amp;quot;user_id&amp;quot;
  ),
  u.item,
  &amp;quot;movie_id&amp;quot;
),
timestamp = as_datetime(timestamp), 
release_date = dmy(release_date)
  ),
  -video_release_date
)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipe each result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- inner_join(u.data, u.user, &amp;quot;user_id&amp;quot;) %&amp;gt;% 
  inner_join(u.item, &amp;quot;movie_id&amp;quot;) %&amp;gt;% 
  mutate(
timestamp = as_datetime(timestamp), 
release_date = dmy(release_date)
  ) %&amp;gt;% 
  select(-video_release_date)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Pipes rewrite your code as if you used pattern in 3., that is assigning results into the same name over and passing it forward. When you see pipes you should think that the left-handside is becoming the first argument in a function call:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x %&amp;gt;% f()&lt;/code&gt; is &lt;code&gt;f(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x %&amp;gt;% f(y)&lt;/code&gt; is &lt;code&gt;f(x, y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10 %&amp;gt;% rnorm(mean = 5, sd = 1)&lt;/code&gt; is &lt;code&gt;rnorm(10, mean = 5, sd = 1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipes are great for several function calls that operate on the same or maybe a couple datasets and result in a single output. Long chains of function calls should be broken up, and when you are dealing with many datasets or many outputs, these cannot be or should not be combined as it may actually lead to more confusing code. It will also not work out of the box or at all with some special functions (book has examples).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additional operator allowing side-effects, like printing structure to check intermediate results, in the middle of transformations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- inner_join(u.data, u.user, &amp;quot;user_id&amp;quot;) %T&amp;gt;%
  str %&amp;gt;% 
  inner_join(u.item, &amp;quot;movie_id&amp;quot;) %T&amp;gt;% 
  str %&amp;gt;% 
  mutate(
timestamp = as_datetime(timestamp), 
release_date = dmy(release_date)
  ) %T&amp;gt;% 
  str %&amp;gt;% 
  select(-video_release_date)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;One value of functions is to capture repeatedly written and used blocks of code, potentially with varying arguments, to enable reuse and code simplification. It is also about extending R to do things it cannot do out of the box or with any package. Lastly, it is a good way to wrap your complicated code into larger logical units and make it better communicable.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;A function is an object that has several components: name, arguments, body, return value, environment. Here is a generic example of creating a new function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name &amp;lt;- function(argument) {
  var &amp;lt;- code(argument)
  return(var)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generic example does not do anything, but here is a simple working example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test_miss &amp;lt;- function(column) {
  missingness &amp;lt;- is.na(column)
  test &amp;lt;- any(missingness)
  return(test)
}&lt;/code&gt;&lt;/pre&gt;
This example takes a column, checks for missing values and returns TRUE if there are any missing values and FALSE if there are no missing values. Here are its components:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test_miss&lt;/code&gt; is the name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col&lt;/code&gt; is the argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{missingness &amp;lt;- is.na(col); test &amp;lt;- any(missingness)}&lt;/code&gt; is the body, or where your code goes&lt;/li&gt;
&lt;li&gt;return value is &lt;code&gt;test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;environmment is global; this is where you have been creating your data objects and what you see in the &lt;em&gt;environment&lt;/em&gt; tab in Rstudio. Do not worry about this component too much as it is a more advanced feature of R.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Name functions as any other object. Avoid reserved names
&lt;ul&gt;
&lt;li&gt;Start with letters, but can also contain numbers, as well as underscores &lt;code&gt;_&lt;/code&gt; and points &lt;code&gt;.&lt;/code&gt; to separate letters. &lt;code&gt;sum_var&lt;/code&gt;, &lt;code&gt;sum.var&lt;/code&gt;, &lt;code&gt;sum1&lt;/code&gt; are all valid names. You can add special symbols by placing the name of your function into backsticks ``.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Arguments are also named. These can have default values.
&lt;ul&gt;
&lt;li&gt;Same naming conventions&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arguments can have default values by setting an argument equal to some value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mean_na &amp;lt;- function(var, na = TRUE) {
  x &amp;lt;- mean(var, na.rm = na)
  return(x)
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Body contains all the computations you want to perform repeatedly. This may be quite complex by adding conditional statements
&lt;ul&gt;
&lt;li&gt;The braces &lt;code&gt;{}&lt;/code&gt; contain all your code as if it was in a script or Rmarkdown chunk&lt;/li&gt;
&lt;li&gt;You can make your function do different things depending on some conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;check_categories &amp;lt;- function(var) {
  if (is.character(var) || is.factor(var)) {
    return(TRUE)
  } else {
    return(FALSE)
  }
}

discretise &amp;lt;- function(var) {
  if (var &amp;lt; 0) {
    value &amp;lt;- &amp;quot;negative&amp;quot;
    return(value)
  } else if (var &amp;gt; 0) {
    value &amp;lt;- &amp;quot;positive&amp;quot;
    return(value)
  } else if (var == 0) {
    value &amp;lt;- &amp;quot;neutral&amp;quot;
    return(value)
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return value may be required inside conditional statements, but otherwise is not needed because by default your funciton will return the last computed result in the body.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environments are an advanced topic, but one thing that is important, is that functions can use variables not passed as arguments or created in the body, but rather created in the same place as the function. This is not recommended as it can make your functions unpredictable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Write all these functions and test them with example inputs:
&lt;ul&gt;
&lt;li&gt;Implement a function, with no arguments or code in the body&lt;/li&gt;
&lt;li&gt;Implement a function that has one argument and it just returns the argument value&lt;/li&gt;
&lt;li&gt;Implement a function that takes a vector of numbers and a single number to check whether a number is in the vector. It should return TRUE or FALSE&lt;/li&gt;
&lt;li&gt;Implement a function that takes a vector and a single value of the same type to find all missing values in a vector and replace them with a single value; use &lt;code&gt;if_else&lt;/code&gt; from &lt;em&gt;dplyr&lt;/em&gt; to help with this&lt;/li&gt;
&lt;li&gt;Implement a function that takes a vector and returns how many unique elements it has&lt;/li&gt;
&lt;li&gt;Implement a function that takes a vector and returns the shortest string if a vector is type character and smallest number if a vector is type double or integer. You can use function &lt;code&gt;which&lt;/code&gt; to find position of the minimum value, e.g. &lt;code&gt;which(3:1 == min(1:3))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Implement a function that calculates average squared difference between two vectors of numerical values&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vectors&lt;/h2&gt;
&lt;p&gt;Data frames are a very useful data structure for data analysis, however when programming it may be an overkill or inadequate. This chapter introduces other ways of representing data in R. We concentrate on vectors - basic data structures in R out of which everything else is build, even data frames.&lt;/p&gt;
&lt;p&gt;Load &lt;code&gt;purrr&lt;/code&gt; library to get some of the functions.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Two basic types of vectors, atomic vectors that are usually just called vectors, and recursive vectors, usually called lists. There are two main differences: each element of an atomic vector has the same type and atomic vectors are flat, while recursive vectors can contain elements of different types and have hierarchical structure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vectors have types of logical, integer, double, complex, character, raw&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c(TRUE, FALSE, NA)                 #logical
c(3L, 1L, 99L, NA)                 #integer
c(1.0, 0.008, NA, Inf, -Inf, NaN)  #double
c(1+4i, 44+1i, NA, Inf, -Inf, NaN) #complex
c(&amp;quot;hello&amp;quot;, &amp;quot;there&amp;quot;, NA)            #character
c(as.raw(0x00), as.raw(0xf4))      #raw&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create vectors with the &lt;code&gt;c()&lt;/code&gt; function - which is mostly manual and shown above - or various functions that generate vectors with special values in them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logical vectors are typically created with logical comparisons or read from a file:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(3L, 1L, 99L, NA) == 1L&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE    NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(3L, 1L, 99L, NA) &amp;gt; 5L&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE    NA&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Integer vectors are often read from a file, but are also used for subsetting other vectors, which requires pattern generation. If created by hand, numbers need &lt;em&gt;L&lt;/em&gt; as a suffix because the default numbers are double type:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1L&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1:3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rep(1:3, times = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 1 2 3 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rep(1:3, each = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 1 1 2 2 2 3 3 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(0, 12, by = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  0  4  8 12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(0, 12, length.out = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  0  6 12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq_along(letters)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
## [24] 24 25 26&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Double vectors are often read from a file or may be generated with a random number generator:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnorm(10, mean = 5, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 4.961494 4.891863 5.180934 5.142750 5.389000 5.990083 4.720025
##  [8] 5.037426 4.957679 6.044893&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;You will not see complex vectors unless you are doing pretty advanced math or physics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Character vectors are often read from files, but also created, as you saw before with the Strings chapter:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)
str_c(&amp;quot;file&amp;quot;, 1:10, &amp;quot;.csv&amp;quot;, sep = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;file1.csv&amp;quot;  &amp;quot;file2.csv&amp;quot;  &amp;quot;file3.csv&amp;quot;  &amp;quot;file4.csv&amp;quot;  &amp;quot;file5.csv&amp;quot; 
##  [6] &amp;quot;file6.csv&amp;quot;  &amp;quot;file7.csv&amp;quot;  &amp;quot;file8.csv&amp;quot;  &amp;quot;file9.csv&amp;quot;  &amp;quot;file10.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Raw vectors are also pretty rare and mostly used in more intricate programming.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another way to create a vector is to coerce one into another.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.logical(c(0, 1, 1, 0))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE  TRUE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.integer(c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.double(c(&amp;quot;1.001&amp;quot;, &amp;quot;9.2842&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.0010 9.2842&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.complex(c(&amp;quot;1.001&amp;quot;, &amp;quot;9.2842&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.0010+0i 9.2842+0i&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.character(c(TRUE, FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;TRUE&amp;quot;  &amp;quot;FALSE&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.raw(0xf4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] f4&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;10&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Coercision may be implicit by a function as a preparation for the downstream code&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(c(TRUE, 1L)) # these conversions follow the hierarchy from logical to character&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(c(TRUE, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(c(TRUE, &amp;quot;1&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(1:10 &amp;lt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;11&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;You can use &lt;code&gt;typeof&lt;/code&gt; or special test functions to determine types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;is.logical(TRUE)
is.integer(1L)
is.double(1.0)
is.complex(1+1i)
is.character(&amp;quot;1&amp;quot;)
is.raw(as.raw(0x00))&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another useful property of vectors is &lt;code&gt;length&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(TRUE, FALSE, NA)
length(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;13&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Working with multiple vectors of different length will invoke recycling which is repeating the elements of the shorter vector to match the length of the longer vector:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1:3 + 3 == 1:3 + c(3, 3, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;14&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;It may be useful to name vectors&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(a = 1, b = 2, c = 3)
setNames(1:3, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a b c 
## 1 2 3 
##   one   two three 
##     1     2     3&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;15&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;It is often needed to pull out specific elements of vectors. For this we use &lt;code&gt;[]&lt;/code&gt; syntax, with either position or name:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(1, 2, 3)[3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;)[2:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;)[-1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;)[c(1, 3, 5)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;one&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;two&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(1, 2, 3, 4)[-(2:3)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;letters[TRUE]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; &amp;quot;e&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;i&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;m&amp;quot; &amp;quot;n&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;q&amp;quot;
## [18] &amp;quot;r&amp;quot; &amp;quot;s&amp;quot; &amp;quot;t&amp;quot; &amp;quot;u&amp;quot; &amp;quot;v&amp;quot; &amp;quot;w&amp;quot; &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;letters[c(TRUE, FALSE)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;a&amp;quot; &amp;quot;c&amp;quot; &amp;quot;e&amp;quot; &amp;quot;g&amp;quot; &amp;quot;i&amp;quot; &amp;quot;k&amp;quot; &amp;quot;m&amp;quot; &amp;quot;o&amp;quot; &amp;quot;q&amp;quot; &amp;quot;s&amp;quot; &amp;quot;u&amp;quot; &amp;quot;w&amp;quot; &amp;quot;y&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## numeric(0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(one = 1, two = 2, three = 3)
x[c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## one two 
##   1   2&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;16&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Lists share many features of atomic vectors, like naming, but are more complex than atomic vector because they can contain mixed types and hierarchies. To create a list you use&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1
## 
## [[2]]
## [1] 2
## 
## [[3]]
## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(TRUE, 1L, 1, 1+1i, &amp;quot;one&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] TRUE
## 
## [[2]]
## [1] 1
## 
## [[3]]
## [1] 1
## 
## [[4]]
## [1] 1+1i
## 
## [[5]]
## [1] &amp;quot;one&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(one = 1, two = 2, three = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $one
## [1] 1
## 
## $two
## [1] 2
## 
## $three
## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(one = 1, two = list(three = 3, four = 4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $one
## [1] 1
## 
## $two
## $two$three
## [1] 3
## 
## $two$four
## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(list(one = 1, two = list(three = 3, four = 4)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 2
##  $ one: num 1
##  $ two:List of 2
##   ..$ three: num 3
##   ..$ four : num 4&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;17&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Lists also have the basic properties of vectors:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(list(1))
length(list(1, 2, 3, 4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;
## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;18&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;You can also subset lists to pull various elements, either by position or name:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(1, 2, 3)[1:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1
## 
## [[2]]
## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(1, 2, list(3, 4))[[3]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 3
## 
## [[2]]
## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- list(one = 1, two = 2)
x[&amp;quot;one&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $one
## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x$one&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;19&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Vectors and lists can be enhanced with &lt;code&gt;attributes&lt;/code&gt;. The most important ones are &lt;em&gt;names&lt;/em&gt;, &lt;em&gt;dims&lt;/em&gt; and &lt;em&gt;class&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attributes(mtcars) #to check
attr(mtcars, &amp;quot;something&amp;quot;) &amp;lt;- 1:3 #to set&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
##  [1] &amp;quot;mpg&amp;quot;  &amp;quot;cyl&amp;quot;  &amp;quot;disp&amp;quot; &amp;quot;hp&amp;quot;   &amp;quot;drat&amp;quot; &amp;quot;wt&amp;quot;   &amp;quot;qsec&amp;quot; &amp;quot;vs&amp;quot;   &amp;quot;am&amp;quot;   &amp;quot;gear&amp;quot;
## [11] &amp;quot;carb&amp;quot;
## 
## $row.names
##  [1] &amp;quot;Mazda RX4&amp;quot;           &amp;quot;Mazda RX4 Wag&amp;quot;       &amp;quot;Datsun 710&amp;quot;         
##  [4] &amp;quot;Hornet 4 Drive&amp;quot;      &amp;quot;Hornet Sportabout&amp;quot;   &amp;quot;Valiant&amp;quot;            
##  [7] &amp;quot;Duster 360&amp;quot;          &amp;quot;Merc 240D&amp;quot;           &amp;quot;Merc 230&amp;quot;           
## [10] &amp;quot;Merc 280&amp;quot;            &amp;quot;Merc 280C&amp;quot;           &amp;quot;Merc 450SE&amp;quot;         
## [13] &amp;quot;Merc 450SL&amp;quot;          &amp;quot;Merc 450SLC&amp;quot;         &amp;quot;Cadillac Fleetwood&amp;quot; 
## [16] &amp;quot;Lincoln Continental&amp;quot; &amp;quot;Chrysler Imperial&amp;quot;   &amp;quot;Fiat 128&amp;quot;           
## [19] &amp;quot;Honda Civic&amp;quot;         &amp;quot;Toyota Corolla&amp;quot;      &amp;quot;Toyota Corona&amp;quot;      
## [22] &amp;quot;Dodge Challenger&amp;quot;    &amp;quot;AMC Javelin&amp;quot;         &amp;quot;Camaro Z28&amp;quot;         
## [25] &amp;quot;Pontiac Firebird&amp;quot;    &amp;quot;Fiat X1-9&amp;quot;           &amp;quot;Porsche 914-2&amp;quot;      
## [28] &amp;quot;Lotus Europa&amp;quot;        &amp;quot;Ford Pantera L&amp;quot;      &amp;quot;Ferrari Dino&amp;quot;       
## [31] &amp;quot;Maserati Bora&amp;quot;       &amp;quot;Volvo 142E&amp;quot;         
## 
## $class
## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;20&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Several data structures you have seen are actually build out of vectors and lists combined with special attributes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(lubridate::as_date(Sys.time()))
attributes(lubridate::as_date(Sys.time()))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
## $class
## [1] &amp;quot;Date&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;iteration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Iteration&lt;/h2&gt;
&lt;p&gt;Recall that functions can extend functionality of R in novel directions, and also help you avoid duplication or rewriting of the same code. Another technique with managing duplication is iteration: doing the same operation on different inputs, be it single numbers stored in a vector, or columns of a data frame, or multiple data frames stored in a list.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Consider a situation where you loaded multiple data sets into a list and you want to check their dimensions to determine where they can be combined into a single data frame.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasets &amp;lt;- list(
  data1 = mtcars,
  data2 = ToothGrowth,
  data3 = WorldPhones,
  data4 = anscombe
)
dim(datasets$data1)
dim(datasets$data2)
dim(datasets$data3)
dim(datasets$data4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32 11
## [1] 60  3
## [1] 7 7
## [1] 11  8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code is repetitive and requires multiple copy-paste combinations and is not efficient, is error-prone and its verbosity competes with the logic of the code.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To remove repetitiveness of known, finite length, we can use for loops:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- vector(&amp;quot;integer&amp;quot;, 4)       # 1. output
for (i in seq_along(datasets)) {      # 2. sequence
  results[i] &amp;lt;- ncol(datasets[[i]])   # 3. body 
}
results&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11  3  7  8&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;output: usually a vector or a list to store results. &lt;code&gt;results &amp;lt;- vector(&amp;quot;integer&amp;quot;, 4)&lt;/code&gt; uses &lt;code&gt;vector&lt;/code&gt; function that takes type of data and length of the vector to create.&lt;/li&gt;
&lt;li&gt;sequence: usually a vector or a list that holds varying inputs. &lt;code&gt;i in seq_along(df)&lt;/code&gt; says that &lt;code&gt;i&lt;/code&gt; will take values in a sequence of numbers going from 1 to the length of &lt;code&gt;datasets&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;body: code that is called repetitively with varying inputs. &lt;code&gt;results[i] &amp;lt;- ncol(datasets[[i]])&lt;/code&gt; is the code that is executed with different values of i. &lt;code&gt;ncol&lt;/code&gt; determines the number of columns for each data set in &lt;code&gt;datasets&lt;/code&gt; and stores it inside &lt;code&gt;results&lt;/code&gt;. This translates to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;results[1] &amp;lt;- ncol(datasets[[1]])
results[2] &amp;lt;- ncol(datasets[[2]])
results[3] &amp;lt;- ncol(datasets[[3]])
results[4] &amp;lt;- ncol(datasets[[4]])&lt;/code&gt;&lt;/pre&gt;
Do these examples. Think carefully about how each problem relates to components of the loop:&lt;/li&gt;
&lt;li&gt;Apply function &lt;code&gt;sd&lt;/code&gt;, which calculates a standard deviation, to each column of mtcars&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Determine type of each column in ToothGrowth data&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The pattern you have seen so far is to loop over indices and create a new data object, however there are several useful variants on it:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Modifying an existing data object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normalize &amp;lt;- function(x) {
  x_norm &amp;lt;- (x - mean(x)) / sd(x)
  x_norm2 &amp;lt;- round(x_norm, 2)
  return(x_norm2)
}
mtcars2 &amp;lt;- mtcars
head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in seq_along(mtcars2)) {
  mtcars2[[i]] &amp;lt;- normalize(mtcars2[[i]])
}
head(mtcars2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                     mpg   cyl  disp    hp  drat    wt  qsec    vs    am
## Mazda RX4          0.15 -0.10 -0.57 -0.54  0.57 -0.61 -0.78 -0.87  1.19
## Mazda RX4 Wag      0.15 -0.10 -0.57 -0.54  0.57 -0.35 -0.46 -0.87  1.19
## Datsun 710         0.45 -1.22 -0.99 -0.78  0.47 -0.92  0.43  1.12  1.19
## Hornet 4 Drive     0.22 -0.10  0.22 -0.54 -0.97  0.00  0.89  1.12 -0.81
## Hornet Sportabout -0.23  1.01  1.04  0.41 -0.84  0.23 -0.46 -0.87 -0.81
## Valiant           -0.33 -0.10 -0.05 -0.61 -1.56  0.25  1.33  1.12 -0.81
##                    gear  carb
## Mazda RX4          0.42  0.74
## Mazda RX4 Wag      0.42  0.74
## Datsun 710         0.42 -1.12
## Hornet 4 Drive    -0.93 -1.12
## Hornet Sportabout -0.93 -0.50
## Valiant           -0.93 -1.12&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Looping over values or names instead of indices&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;image_names &amp;lt;- dir(pattern = &amp;quot;.jpg&amp;quot;)
image_data &amp;lt;- vector(&amp;quot;list&amp;quot;, 4)
par(mfrow = c(2, 2))

for (name in image_names) {
  img &amp;lt;- jpeg::readJPEG(name)
  plot(1, 1, xlim = c(1, 640), ylim = c(1, 480), axes = FALSE, xlab = NA, ylab = NA)
  rasterImage(img, 1, 1, 640, 480)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://synikitin.github.io/analytics6600/img/iteration.png&#34; /&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Handling outputs of unknown length&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;means &amp;lt;- c(0, 1, 2)
out &amp;lt;- vector(&amp;quot;list&amp;quot;, length(means))
for (i in seq_along(means)) {
  n &amp;lt;- sample(100, 1)
  out[[i]] &amp;lt;- rnorm(n, means[[i]])
}
out &amp;lt;- unlist(out)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Handling inputs of unknown length&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while (condition) {
  body
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Loop exercises:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;input: vector of logical values body: checks for TRUE and saves the index in the output vector output: vector of integers representing positions of TRUE values&lt;/li&gt;
&lt;li&gt;Create a function that takes a data frame, loops through its columns, calculates mean of each column, and returns a vector of double numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Wrangling and Exploring</title>
      <link>/publication/wrangle/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/wrangle/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;learning-objectives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Learning Objectives&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Package loading&lt;/li&gt;
&lt;li&gt;Data import&lt;/li&gt;
&lt;li&gt;Data clean up&lt;/li&gt;
&lt;li&gt;Data manipulation&lt;/li&gt;
&lt;li&gt;Exploratory calculations and visualization&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;context&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this assignment, we will explore a sample of data from &lt;a href=&#34;https://movielens.org&#34;&gt;MovieLens&lt;/a&gt; service that collects information about users and their ratings of movies covering roughly 1997 - 1998 release dates; the data is used to build experimental exploration and recommendation products by &lt;a href=&#34;http://grouplens.org/&#34;&gt;GroupLens&lt;/a&gt;. In our case, this data is a good source of exercises to meet various learning objectives. You can download the zip-compressed collection of files using the &lt;strong&gt;Dataset&lt;/strong&gt; button and read more about it under &lt;strong&gt;Project&lt;/strong&gt; button.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Import&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As usual, start by creating a new folder and turning it into a Rstudio project, and then copy the downloaded data there. You will need software to unzip the files - it should be installed on Mac by default, and on windows you could install and use &lt;strong&gt;WinZip&lt;/strong&gt;. Once you unzip the file, you should have a new folder called &lt;strong&gt;ml-100k&lt;/strong&gt; or something similar, which you can check using &lt;em&gt;Files&lt;/em&gt; tab in Rstudio.&lt;/p&gt;
&lt;p&gt;There will be many files in the new, unzipped folder. The first part of the assignment is to read in 3 files. Start a new Rmarkdown file to capture your import commands.&lt;/p&gt;
&lt;p&gt;Suggested functions: &lt;code&gt;read_tsv&lt;/code&gt; for tab separated columns and &lt;code&gt;read_delim&lt;/code&gt; for arbitrary delimited files.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read and assign to a variable tab-separated &lt;strong&gt;u.data&lt;/strong&gt; file. Give columns these names - &lt;em&gt;user id, movie id, rating, timestamp&lt;/em&gt; - but make sure to clean up any unusual symbols or spaces. This dataset contains information about rating by a specific user for a specific movie on some date and time. Examine the variable you created with &lt;code&gt;str&lt;/code&gt; function in the console. Are there any columns that may need transformation to be understood?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;read_tsv(file = &amp;quot;u.data&amp;quot;, col_names = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read and assign to a variable pipe-separated, |, &lt;strong&gt;u.item&lt;/strong&gt; file. Give columns these names - &lt;em&gt;movie id, movie title, release date, video release date, IMDb_URL, unknown, Action, Adventure, Animation, Childrens, Comedy, Crime, Documentary, Drama, Fantasy, Film-Noir, Horror, Musical, Mystery, Romance, Sci-Fi, Thriller, War, Western&lt;/em&gt; - but make sure to clean up any unusual symbols or spaces. This dataset contains information about movies, like their names and what genres they fall under. Examine the variable you created with &lt;code&gt;str&lt;/code&gt; function in the console. Are there any columns that may need transformation to be understood?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;read_delim(file = &amp;quot;u.item&amp;quot;, delim = &amp;quot;|&amp;quot;, col_names = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read and assign to a variable pipe-separated, |, &lt;strong&gt;u.user&lt;/strong&gt; file. Give columns these names - &lt;em&gt;user id, age, gender, occupation, zip code&lt;/em&gt; - but make sure to clean up any unusual symbols or spaces. This dataset contains information about users, like their age and occupation. Examine the variable you created with &lt;code&gt;str&lt;/code&gt; function in the console. Are there any columns that may need transformation to be understood?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;read_delim(file = &amp;quot;u.user&amp;quot;, delim = &amp;quot;|&amp;quot;, col_names = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-joins&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Joins&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You should now have three data frames loaded in R; confirm this by using the environment tab. The next step is to combine all the information together using &lt;code&gt;*_join&lt;/code&gt; functions from &lt;strong&gt;dplyr&lt;/strong&gt;. This requires knowing foreign keys - variables in common between data frames that can uniquely identify rows in each other.&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;What is the foreign key between u.data and u.user data frames? How about u.data and u.item data frames?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experiment with &lt;code&gt;inner_join&lt;/code&gt; and &lt;code&gt;full_join&lt;/code&gt; from &lt;strong&gt;dplyr&lt;/strong&gt; to join &lt;em&gt;u.data&lt;/em&gt; to &lt;em&gt;u.user&lt;/em&gt;, and then both to &lt;em&gt;u.item&lt;/em&gt;. Could we have used a composition of two &lt;code&gt;left_join&lt;/code&gt; calls here without losing data? Why? Think about the relations and cross-combinations between the three data sets in terms of users and movies.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inner_join(inner_join(df1, df2, &amp;quot;key&amp;quot;), df3, &amp;quot;key&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-cleanup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Cleanup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Examine the combined data frame with &lt;code&gt;str&lt;/code&gt;; check that you have all columns corresponding to u.data, u.user, and u.item columns. One thing to notice is that types are off for a couple variables. Specifically, &lt;em&gt;timestamp&lt;/em&gt; is shown to be an uninterpretable integer and &lt;em&gt;release date&lt;/em&gt; is stored as character. The other is that &lt;em&gt;video release date&lt;/em&gt; has nothing but missing values.&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;em&gt;timestamp&lt;/em&gt; stores datetime type incorrectly as integers and &lt;em&gt;release date&lt;/em&gt; stores a combination of year, month and day as character. Use appropriate type converting function from &lt;strong&gt;lubridate&lt;/strong&gt; package to transform the variable types. Confirm that we have data somewhere around 1997 - 1998 with &lt;code&gt;range(df$timestamp)&lt;/code&gt;, substituting your name for &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;as_datetime(1488508654)
ymd(&amp;quot;2017-January-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Remove &lt;em&gt;video release date&lt;/em&gt; from the dataset.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select(df, -var)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;movies-by-genre&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Movies by Genre&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Our first exploratory analysis will focus on the question of which genre was least produced and most produced in 1997 - 1998 period. The final output will be a bar chart, however the first step is to shape and transform data so it can be easily plotted.&lt;/p&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Note that some column names in your combined dataset actually stand for genres. Check that it is so by using &lt;code&gt;str&lt;/code&gt;. &lt;strong&gt;The question is which genre was least and which genre was most produced?&lt;/strong&gt; To answer it, we could use a data frame containing only two variables: genres and their count. Combine &lt;code&gt;gather&lt;/code&gt; from &lt;strong&gt;tidyr&lt;/strong&gt; and &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt; functions from &lt;strong&gt;dplyr&lt;/strong&gt; to accomplish this. &lt;code&gt;gather&lt;/code&gt; can turn genre headers and values under the headers into two separate columns, genre and value, say. By placing them into columns you can then apply various tools from &lt;strong&gt;dplyr&lt;/strong&gt;. &lt;code&gt;distinct&lt;/code&gt; should be used to make sure there are no duplicates among movies, genres, and values. &lt;code&gt;filter&lt;/code&gt; should be used to remove genres which where not present for a given movie. Finally, &lt;code&gt;count&lt;/code&gt; of genres will contain both least and most produced movies.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stocks &amp;lt;- data_frame(
  time = ymd(&amp;#39;2009-01-01&amp;#39;) + 0:9,
  X = rnorm(10, 0, 1),
  Y = rnorm(10, 0, 2),
  Z = rnorm(10, 0, 4)
)

gather(stocks, stock, price, 2:4) %&amp;gt;% 
  distinct(time, stock, .keep_all = TRUE) %&amp;gt;% 
  filter(stock == &amp;quot;X&amp;quot;) %&amp;gt;% 
  count(stock) &lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;If you examine your transformed data by printing it in the console, you will see that rows are arranged alphabetically by genre. It is more visually telling if our bar chart was arranged by count instead, however &lt;code&gt;arrange&lt;/code&gt; from &lt;strong&gt;dplyr&lt;/strong&gt; will not work here. To fix the order we need to transform genres into a factor and reorder it by count. Convert &lt;em&gt;genre&lt;/em&gt; variable to factor and reorder it by count using a function from &lt;strong&gt;forcats&lt;/strong&gt; package.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mutate(df, x = factor(x), x = fct_reorder(x, n))&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;10&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Now make a horizontally pointed bar chart of counts by genre (you have done this in assignment 1). Additionally, make the annotations nicer with function by adding this to your ggplot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  labs(x = &amp;quot;x label&amp;quot;, y = &amp;quot;y label&amp;quot;, title = &amp;quot;chart title&amp;quot;,
   caption = &amp;quot;Source: MovieLens&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;by adjusting its inputs and adding it to your ggplot code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(df, aes(x, n)) +
  geom_col() + 
  coord_flip() +
  labs(x = &amp;quot;x label&amp;quot;, y = &amp;quot;y label&amp;quot;, title = &amp;quot;chart title&amp;quot;,
       caption = &amp;quot;Source: MovieLens&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;users-demographics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Users’ Demographics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;What can we understand about the user of MovieLens? We want to examine relations between age, gender and occupation, regardless of location.&lt;/p&gt;
&lt;ol start=&#34;11&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;What age and gender is the oldest engineer?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;group_by(df, x, y) %&amp;gt;% 
  summarise(max_z = max(z)) %&amp;gt;% 
  arrange(desc(max_z), x)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;12&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Now, lets visualise the three-way relation. Use &lt;code&gt;geom_boxplot&lt;/code&gt; to obtain a representation of age distribution for each occupation, and employ &lt;code&gt;facet_wrap&lt;/code&gt; to group data by gender. Make sure to experiment with &lt;code&gt;coord_flip&lt;/code&gt; to get readable labels on axes, and &lt;code&gt;labs&lt;/code&gt; function to set axis titles, plot title, and caption citing the source data. Use the 0.25, 0.5 and 0.75 quantiles that define the box in the boxplot to compare users in the healthcare occupation in terms of median age, variability in age and difference across gender.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(df, aes(x, y)) +
  geom_boxplot() +
  facet_wrap(~ z) +
  coord_flip() +
  labs(x = &amp;quot;a&amp;quot;, y = &amp;quot;b&amp;quot;, title = &amp;quot;c&amp;quot;,
    caption = &amp;quot;d&amp;quot;)  &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;movie-ratings-by-occupation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Movie Ratings by Occupation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this part, we will look at relations between users, movies and ratings. Lets compare average rating for a SciFi movie for an executive and a scientist.&lt;/p&gt;
&lt;ol start=&#34;11&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Calculate mean rating for an executive and a scientist using a single composition of functions from &lt;strong&gt;dplyr&lt;/strong&gt; (both numbers should be in the same data frame). This requires filtering rows and grouped summarisation. Adapt the following syntax for creating a vector of logical values to help you filter occupations of interest:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;a&amp;quot;
x %in% c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter(df, x %in% c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;), y == 1) %&amp;gt;%
  group_by(x) %&amp;gt;% 
  summarise(mean(z))&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;12&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a grid of plots showing bar plots signifying proportions of ratings given to a certain genre of movie by a user of a certain occupation. This is a large plot that is legible only when you stretch the pane with &lt;em&gt;Plots&lt;/em&gt; tab throughout your screen and may take a few moments to render.&lt;br /&gt;
First, you will need to prepare a dataset similar to what you did in 8 - deriving genre from column headers - except for controlling for duplicates with &lt;code&gt;distinct&lt;/code&gt; function only for rating, genre and occupation.&lt;br /&gt;
Second, create the basic bar plots and group them with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;facet_grid(genre ~ occupation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and aesthetics specified with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aes(x = rating, y = ..prop..).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;..prop..&lt;/code&gt; is what replaces counts with proportions.&lt;br /&gt;
Third, add axis labels and title and caption as before, adjusted for the information you are displaying in this plot.&lt;br /&gt;
Fourth, add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scale_x_continuous(breaks = 1:5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to your ggplot to control which values show up on the x-axis and determine centers of the bars.&lt;br /&gt;
Fifth, add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme(axis.text = element_text(size = 5),  
  strip.text.x = element_text(size = 6),   
  strip.text.y = element_text(size = 5, angle = 30))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to control size of text annotating axis with numbers, and title of the rows and columns in the strips. In general, &lt;code&gt;theme&lt;/code&gt; is a way to adjust many appearance elements of the plot and to make it presentable for communication.&lt;br /&gt;
Sixth, use the plot to determine what seems to be the dominant attitude of executives towards documentaries of 1997 - 1998 period based on their ratings distribution?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gather() %&amp;gt;%
  filter() %&amp;gt;% 
  distinct(rating, genre, occupation) %&amp;gt;% 
  ggplot(aes(rating, ..prop..)) +
  geom_bar() +
  facet_grid(genre ~ occupation) +
  labs(x = &amp;quot;a&amp;quot;, y = &amp;quot;b&amp;quot;,
       title = &amp;quot;c&amp;quot;,
       caption = &amp;quot;Source: MovieLens&amp;quot;) +
  scale_x_continuous(breaks = 1:5) +
  theme(axis.text = element_text(size = 5),
        strip.text.x = element_text(size = 6),
        strip.text.y = element_text(size = 5, angle = 30))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Dont forget to put all your code into Rmarkdown and test that all of it runs without errors to produce an html file that contains your answers. Good luck!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Wrangle - Part II</title>
      <link>/post/wrangle2/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/wrangle2/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;strings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Strings&lt;/h2&gt;
&lt;p&gt;Package: &lt;code&gt;library(stringr)&lt;/code&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Creation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;Richard Stallman doesn&amp;#39;t mind if you read his mail as long as you don&amp;#39;t delete it before he reads it. &amp;quot;
y &amp;lt;- &amp;#39;Richard Stallman met Chuck Norris once. Chuck tried a roundhouse, but Richard bashed him 
in the skull.&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try creating this string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;Richard Stallman&amp;#39;s beard trimmings can cure cancer. Too bad he never shaves.&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Escaping quotes to have quotes inside quotes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;Richard Stallman\&amp;#39;s beard trimmings can cure cancer. Too bad he never shaves.&amp;#39;
&amp;quot;Richard Stallman gets \&amp;quot;9 bits\&amp;quot; to the byte.&amp;quot;  &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;writeLines&lt;/code&gt; as opposed to &lt;code&gt;print&lt;/code&gt; to show the actual string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;writeLines(&amp;quot;Richard Stallman gets \&amp;quot;9 bits\&amp;quot; to the byte.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Special strings signifying space:
&lt;ul&gt;
&lt;li&gt;“\n” newline&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;“\r” carriage return&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;“\t” tab&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a vector of strings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Number of characters (length):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str_length(
 c(&amp;quot;Richard Stallman can solve the halting problem... in polynomial time.&amp;quot;, NA)
)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Combine strings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str_c(&amp;quot;hello&amp;quot;, c(&amp;quot;there&amp;quot;, &amp;quot;here&amp;quot;), sep = &amp;quot; &amp;quot;)
str_c(&amp;quot;hello&amp;quot;, c(&amp;quot;there&amp;quot;, &amp;quot;here&amp;quot;, &amp;quot;&amp;quot;), sep = &amp;quot; &amp;quot;, collapse = &amp;quot; &amp;quot;)
x &amp;lt;- &amp;quot;Class&amp;quot;
str_c(
  x,
  &amp;quot;is ...&amp;quot;,
  if (wday(Sys.time(), label = TRUE) == &amp;quot;Mon&amp;quot;) &amp;quot;on&amp;quot; else &amp;quot;off&amp;quot;,
  sep = &amp;quot; &amp;quot;
)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sub-strings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str_sub(&amp;quot;Richard Stallman did not write GNU Emacs, he simply read the source code from /dev/null.&amp;quot;, start = 1, end = 7)
str_sub(&amp;quot;Richard Stallman did not write GNU Emacs, he simply read the source code from /dev/null.&amp;quot;, start = -6, end = -1)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str_to_lower(&amp;quot;LARGE LETTERS&amp;quot;)
str_to_upper(&amp;quot;SMALL LETTERS&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String sort:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str_sort(c(&amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Saturday&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exercise: Fix the following strings if needed, lower their case, then combine them with newline character to show one quote per line, and finally get the length of the full string.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;Richard Stallman doesn&amp;#39;t need sudo. I will make him a sandwich anyway.&amp;#39;
&amp;quot;Richard Stallman&amp;#39;s beard is made of parentheses.&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Regular expression:&lt;br /&gt;
I often refer to this &lt;a href=&#34;https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/&#34;&gt;cheatsheet&lt;/a&gt; to remind myself of syntax. I will show only simple examples as it is better learned piece by piece as needed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a-b 0-9 Alpha-numerical characters&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;zip code 60099&amp;quot;
str_extract(string = x, pattern = &amp;quot;zip code&amp;quot;)
str_detect(string = x, pattern = &amp;quot;60099&amp;quot;)
str_replace(string = x, pattern = &amp;quot;60099&amp;quot;, replacement = &amp;quot;60000&amp;quot;)
str_split(string = x, pattern = &amp;quot; &amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;!-) Special symbols may need escaping if they are regex syntax&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;zip code @ (#60099)&amp;quot;
str_extract(string = x, pattern = &amp;quot;\\(&amp;quot;)
str_detect(string = x, pattern = &amp;quot;#&amp;quot;)
str_replace(string = x, pattern = &amp;quot;@&amp;quot;, replacement = &amp;quot;&amp;quot;)
str_split(string = x, pattern = &amp;quot; &amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;. One of any symbols&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;zip code @ (#60099).&amp;quot;
str_extract(string = x, pattern = &amp;quot;z.p&amp;quot;)
str_detect(string = x, pattern = &amp;quot;co.e&amp;quot;)
str_replace_all(string = x, pattern = &amp;quot;\\.&amp;quot;, replacement = &amp;quot;!&amp;quot;)
str_split(string = x, pattern = &amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Special symbols
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\d&lt;/code&gt; digits 0 - 9&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\\s&lt;/code&gt; spaces like \n&lt;/li&gt;
&lt;li&gt;[a1@] any group of symbols&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[^a1@] ^ makes it NOT this group of symbols&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;zip code @ (#60099).\n&amp;quot;
str_replace_all(string = x, pattern = &amp;quot;\\s&amp;quot;, replacement = &amp;quot; &amp;quot;)
str_detect(string = x, pattern = &amp;quot;[@#]&amp;quot;)
str_extract_all(string = x, pattern = &amp;quot;[^@#()]&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Anchors
&lt;ul&gt;
&lt;li&gt;^ front&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ back&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;truth is truth&amp;quot;
str_replace_all(string = x, pattern = &amp;quot;^truth&amp;quot;, replacement = &amp;quot;lie&amp;quot;)
str_replace_all(string = x, pattern = &amp;quot;truth$&amp;quot;, replacement = &amp;quot;lie&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;| is a logical OR operator for multiple patterns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;zip code @ (#60099).\n&amp;quot;
str_replace_all(string = x, pattern = &amp;quot;\\d|[@#()]&amp;quot;, replacement = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Quantifiers
&lt;ul&gt;
&lt;li&gt;? (0 or 1 times)&lt;/li&gt;
&lt;li&gt;+ (1 or more)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;* (0 or more)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;groowthh&amp;quot;
str_extract_all(string = x, pattern = &amp;quot;o+&amp;quot;)
str_detect(string = x, pattern = &amp;quot;o+w?th*&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;categorical-data-with-factor-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Categorical Data with Factor Type&lt;/h2&gt;
&lt;p&gt;Package: &lt;code&gt;library(forcats)&lt;/code&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create factor to represent a categorical variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)
factor(x, levels = c(&amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Control levels (categories)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;factor(c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), levels = c(&amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;))&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reorder levels using a numerical variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(dplyr)
x &amp;lt;- tibble(f = factor(letters[1:4]),
        n = c(3, 1, 2, 4))
y &amp;lt;- mutate(x, f = fct_reorder(f, n, mean))&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;date-datetime-time&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Date, Datetime, Time&lt;/h2&gt;
&lt;p&gt;Package: &lt;code&gt;library(lubridate)&lt;/code&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Timestamps to datetimes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(lubridate)
timestamp &amp;lt;- Sys.time() # creates an example timestamp
timestamp # shows timestamp
as.integer(timestamp) # shows underlying representation of timestamp
x &amp;lt;- as.integer(timestamp) # convert timestamp to integer
as_datetime(x) # convert integer to timestamp&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Range of datetimes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sys.time() + 1:10
range(Sys.time() + 1:10)
min(Sys.time() + 1:10)
max(Sys.time() + 1:10)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extract pieces like days, weeks, years, hours, seconds…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- Sys.time()
year(x)
month(x)
month(x, label = TRUE)
wday(x)
wday(x, label = TRUE)
hour(x)
minute(x)
second(x)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strings to dates&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ymd(&amp;quot;2017-02-20&amp;quot;)
dmy(&amp;quot;01-01-1910&amp;quot;)
ymd(&amp;quot;2017-Feb-20&amp;quot;)
dmy_hms(&amp;quot;01-01-1910 23:44:56&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Wrangle - Part I</title>
      <link>/post/wrangle/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/wrangle/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;basic-concepts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Basic Concepts&lt;/h1&gt;
&lt;div id=&#34;material&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tibble(x = 1:3)&lt;/code&gt; local in R&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data()&lt;/code&gt; - local in R&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%22/Users/snikitin/Documents/training/class/analytics6600/static/data/movies.csv%22&#34;&gt;&lt;/a&gt; - local on disc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%22https://synikitin.github.io/analytics6600/data/movies.csv%22&#34;&gt;&lt;/a&gt; - remote on disk, direct download&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%22https://www.quandl.com/tools/api%22&#34;&gt;&lt;/a&gt; - remote on disc, api&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;machinery&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Machinery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;computer&lt;/li&gt;
&lt;li&gt;integrated development environment (IDE)&lt;/li&gt;
&lt;li&gt;programming language&lt;/li&gt;
&lt;li&gt;file formats&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;product&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Product&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;clean data&lt;/li&gt;
&lt;li&gt;visualization&lt;/li&gt;
&lt;li&gt;statistical model&lt;/li&gt;
&lt;li&gt;report&lt;/li&gt;
&lt;li&gt;web application&lt;/li&gt;
&lt;li&gt;optimized algorithm&lt;/li&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;task&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Task&lt;/h1&gt;
&lt;div id=&#34;io&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;IO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;library(readr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;library(tibble)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;tidy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tidy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;library(tidyr)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;transform&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Transform&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;programming&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Programming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;library(magrittr)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;learning-new-packages-and-functions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Learning new packages and functions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CRAN&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help(package = &amp;quot;readr&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;purpose&lt;/li&gt;
&lt;li&gt;available arguments&lt;/li&gt;
&lt;li&gt;example code, sometimes &lt;code&gt;demo(package = &amp;quot;stats&amp;quot;)&lt;/code&gt;, &lt;code&gt;example(&amp;quot;summarise&amp;quot;, package = &amp;quot;dplyr&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;tibbles&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tibbles&lt;/h1&gt;
&lt;div id=&#34;creating&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tibble&lt;/code&gt; tibble( population = c(783744, 923972, 823972, 789374), city = c(“chicago”, “columbus”, “boston”, “cleveland”) )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tribble&lt;/code&gt; tribble( ~x, ~y, 1, “2”, 3, 4 )&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;printing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Printing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print(df, n, width)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subsetting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df[[&amp;quot;a&amp;quot;]]&lt;/code&gt;, &lt;code&gt;df[[1]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df$a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data Import&lt;/h1&gt;
&lt;div id=&#34;read_csv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;read_csv&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;read_csv( 
  &amp;quot;Some random text here
  a,b,c
  1,2,! #This is a comment. ! is a missing value.
  4,5,6&amp;quot;,
  skip = 2,
  na = &amp;quot;!&amp;quot;,
  comment = &amp;quot;#&amp;quot;,
  n_max = 2,
  col_names = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;),
  col_types = cols(x = col_integer(),
                   y = col_double(),
                   z = col_character())
)             &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;arguments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;skip&lt;/li&gt;
&lt;li&gt;comment&lt;/li&gt;
&lt;li&gt;col_names&lt;/li&gt;
&lt;li&gt;na&lt;/li&gt;
&lt;li&gt;n_max&lt;/li&gt;
&lt;li&gt;locale&lt;/li&gt;
&lt;li&gt;col_types (logical, numbers, text, date, time, datetime)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;write_csv-write_excel_csv-write_rds&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;write_csv, write_excel_csv, write_rds&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;similar arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;other-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;other packages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;haven&lt;/li&gt;
&lt;li&gt;readxl&lt;/li&gt;
&lt;li&gt;DBI&lt;/li&gt;
&lt;li&gt;jsonlite&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xml2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lets practice &lt;code&gt;read_csv&lt;/code&gt; with the following data:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;x &amp;lt;- &amp;quot;Confidential Data - Email abc@gmail.com for Permission
    $earnings,Months in 2017,store
    14343.43,January,! *Note: missing values marked with !
    34322.33,February,6343\n&amp;quot;
    
writeChar(  
  x,
  &amp;quot;readr_example.csv&amp;quot;,
  176
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tidying-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tidying Data&lt;/h1&gt;
&lt;div id=&#34;structure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;columns&lt;/li&gt;
&lt;li&gt;rows&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;semantics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Semantics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;unit&lt;/li&gt;
&lt;li&gt;variable&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;observation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;messy-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Messy data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Column headers are values, not variable names. This is messy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- tribble(
  ~region, ~`$0 - $100k`, ~`$100k - $1,000k`, ~`$1,000k - $10,000k`,
  &amp;quot;midwest&amp;quot;, 152, 78, 5,
  &amp;quot;west&amp;quot;, 190, 130, 10
  )
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 4
##    region `$0 - $100k` `$100k - $1,000k` `$1,000k - $10,000k`
##     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;                &amp;lt;dbl&amp;gt;
## 1 midwest          152                78                    5
## 2    west          190               130                   10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this is tidy by turning headers into a variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gather(data = a, key = income, value = count, 2:4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 3
##    region             income count
##     &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 midwest         $0 - $100k   152
## 2    west         $0 - $100k   190
## 3 midwest    $100k - $1,000k    78
## 4    west    $100k - $1,000k   130
## 5 midwest $1,000k - $10,000k     5
## 6    west $1,000k - $10,000k    10&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Multiple variables are stored in one column. This is messy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;b &amp;lt;- tribble(
  ~`region-income`, ~count,
  &amp;quot;midwest, $0 - 100k&amp;quot;, 152,
  &amp;quot;west, $0 - 100k&amp;quot;, 190,
  &amp;quot;midwest, $100k - 1,000k&amp;quot;, 78,
  &amp;quot;west, $100k - 1,000k&amp;quot;, 130
)
b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 2
##           `region-income` count
##                     &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1      midwest, $0 - 100k   152
## 2         west, $0 - 100k   190
## 3 midwest, $100k - 1,000k    78
## 4    west, $100k - 1,000k   130&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this is tidy by splitting a variable into two variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separate(data = b, col = `region-income`,
         into = c(&amp;quot;region&amp;quot;, &amp;quot;income&amp;quot;), sep = &amp;quot;, &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 3
##    region         income count
## *   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 midwest      $0 - 100k   152
## 2    west      $0 - 100k   190
## 3 midwest $100k - 1,000k    78
## 4    west $100k - 1,000k   130&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Variables are stored in rows. This is messy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d &amp;lt;- tribble(
  ~region, ~income, ~statistic,
  &amp;quot;midwest&amp;quot;, 193478374, &amp;quot;annual_max&amp;quot;,
  &amp;quot;midwest&amp;quot;, 878743, &amp;quot;annual_min&amp;quot;,
  &amp;quot;west&amp;quot;, 29743443, &amp;quot;annual_max&amp;quot;,
  &amp;quot;west&amp;quot;, 19984028, &amp;quot;annual_min&amp;quot;
)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 3
##    region    income  statistic
##     &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;chr&amp;gt;
## 1 midwest 193478374 annual_max
## 2 midwest    878743 annual_min
## 3    west  29743443 annual_max
## 4    west  19984028 annual_min&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this is tidy by turning a variable into column headers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spread(data = d, key = statistic, value = income)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##    region annual_max annual_min
## *   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 midwest  193478374     878743
## 2    west   29743443   19984028&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Multiple types of observational units are stored in the same table, in this case two separate time scales. This is messy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e &amp;lt;- tribble(
  ~region, ~annual_max, ~annual_min, ~monthly_avg, ~month,
  &amp;quot;midwest&amp;quot;, 193478374, 878743, 193947931, &amp;quot;January&amp;quot;,
  &amp;quot;midwest&amp;quot;, 193478374, 878743, 153394881, &amp;quot;February&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this is tidy by removing annual scale variables&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(e, -annual_max, -annual_min)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##    region monthly_avg    month
##     &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;chr&amp;gt;
## 1 midwest   193947931  January
## 2 midwest   153394881 February&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or this is tidy by removing monthly scale variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(e, -monthly_avg, -month) %&amp;gt;% 
  distinct&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##    region annual_max annual_min
##     &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 midwest  193478374     878743&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A single observational unit is stored in multiple tables. This is messy&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- tribble(
  ~region, ~income, ~statistic,
  &amp;quot;midwest&amp;quot;, 193478374, &amp;quot;annual_max&amp;quot;,
  &amp;quot;midwest&amp;quot;, 878743, &amp;quot;annual_min&amp;quot;
)
g &amp;lt;- tribble(
  ~region, ~income, ~statistic,
  &amp;quot;west&amp;quot;, 29743443, &amp;quot;annual_max&amp;quot;,
  &amp;quot;west&amp;quot;, 19984028, &amp;quot;annual_min&amp;quot;
)
f&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##    region    income  statistic
##     &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;chr&amp;gt;
## 1 midwest 193478374 annual_max
## 2 midwest    878743 annual_min&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3
##   region   income  statistic
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;chr&amp;gt;
## 1   west 29743443 annual_max
## 2   west 19984028 annual_min&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this is tidy by combining them into a single data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bind_rows(f, g)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 3
##    region    income  statistic
##     &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;chr&amp;gt;
## 1 midwest 193478374 annual_max
## 2 midwest    878743 annual_min
## 3    west  29743443 annual_max
## 4    west  19984028 annual_min&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Tidy the following dataset. It consists of a history of quarterly earnings per share of Johnson and Johnson.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- matrix(JohnsonJohnson, byrow = TRUE, ncol = 4) %&amp;gt;% 
  as_tibble() %&amp;gt;%
  rename(quarter1 = V1, quarter2 = V2, quarter3 = V3, quarter4 = V4) %&amp;gt;% 
  mutate(year = 1960:1980, stockinfo = &amp;quot;JNJ-NYSE&amp;quot;)
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 × 6
##    quarter1 quarter2 quarter3 quarter4  year stockinfo
##       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;
## 1      0.71     0.63     0.85     0.44  1960  JNJ-NYSE
## 2      0.61     0.69     0.92     0.55  1961  JNJ-NYSE
## 3      0.72     0.77     0.92     0.60  1962  JNJ-NYSE
## 4      0.83     0.80     1.00     0.77  1963  JNJ-NYSE
## 5      0.92     1.00     1.24     1.00  1964  JNJ-NYSE
## 6      1.16     1.30     1.45     1.25  1965  JNJ-NYSE
## 7      1.26     1.38     1.86     1.56  1966  JNJ-NYSE
## 8      1.53     1.59     1.83     1.86  1967  JNJ-NYSE
## 9      1.53     2.07     2.34     2.25  1968  JNJ-NYSE
## 10     2.16     2.43     2.70     2.25  1969  JNJ-NYSE
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;relational-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Relational data&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;tables and keys (primary, foreign, surrogate); key in the following data sets&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks &amp;lt;- tibble(earnings = c(800, 150, 240, 65),
                 volume = c(1599500, 30531626, 4276880, 25187460),
                 symbol = c(&amp;quot;GOOG&amp;quot;, &amp;quot;APPL&amp;quot;, &amp;quot;GS&amp;quot;, &amp;quot;MSFT&amp;quot;))
stocks&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 3
##   earnings   volume symbol
##      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;
## 1      800  1599500   GOOG
## 2      150 30531626   APPL
## 3      240  4276880     GS
## 4       65 25187460   MSFT&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks2 &amp;lt;- tibble(earnings = c(800, 15),
                  volume = c(1599500, 13210000),
                  symbol = c(&amp;quot;GOOG&amp;quot;, &amp;quot;HBAN&amp;quot;))

symbols &amp;lt;- tibble(symbol = c(&amp;quot;GOOG&amp;quot;, &amp;quot;APPL&amp;quot;, &amp;quot;GS&amp;quot;, &amp;quot;HBAN&amp;quot;),
                  exchange = c(&amp;quot;NASDAQ&amp;quot;, &amp;quot;NASDAQ&amp;quot;, &amp;quot;NYSE&amp;quot;, &amp;quot;NASDAQ&amp;quot;))
symbols&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 2
##   symbol exchange
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;
## 1   GOOG   NASDAQ
## 2   APPL   NASDAQ
## 3     GS     NYSE
## 4   HBAN   NASDAQ&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;left, right, outer join (mutating)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inner_join(x = stocks, y = symbols, by = &amp;quot;symbol&amp;quot;)
left_join(x = stocks, y = symbols, by = &amp;quot;symbol&amp;quot;)
right_join(x = stocks, y = symbols, by = &amp;quot;symbol&amp;quot;)
full_join(x = stocks, y = symbols, by = &amp;quot;symbol&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;semi, anti join (filtering)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;semi_join(x = stocks, y = symbols, by = &amp;quot;symbol&amp;quot;)
anti_join(x = stocks, y = symbols, by = &amp;quot;symbol&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;intersect, union, setdiff&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;union(x = stocks, y = stocks2)
intersect(x = stocks, y = stocks2)
setdiff(x = stocks, y = stocks2)
setdiff(x = stocks2, y = stocks)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify primary and foreign keys in all datasets&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;set.seed(349834)

calls &amp;lt;- tibble(
  company = &amp;quot;schevchenko steele&amp;quot;, #rep(companies, each = 12)
  number = rbinom(5, 30, .3),
  month = month.name[1:5] #rep(month.name, 10)
)
sales &amp;lt;- tibble(
  company = &amp;quot;schevchenko steele&amp;quot;,
  amount = rgamma(10, 1e4, 1 / 1e4),
  month = month.name[-c(1, 9)]
)
orders &amp;lt;- tibble(
  company = &amp;quot;schevchenko steele&amp;quot;,
  fullfilment = rbeta(10, 4, 8),
  month = month.name[-c(1, 9)]
) &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Join calls and sales for only matching months&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enrich calls with whatever sales data there is&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enrich sales with whatever calls data there is&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join calls and sales for all months&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Obtain sales data for which you have calls&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Obtain orders data for which you have no calls&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join all datasets into a single data frame with all months&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Exploratory Data Analysis</title>
      <link>/publication/eda/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/eda/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;learning-objectives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Learning Objectives&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Package loading&lt;/li&gt;
&lt;li&gt;Data import&lt;/li&gt;
&lt;li&gt;Data clean up&lt;/li&gt;
&lt;li&gt;Data manipulation&lt;/li&gt;
&lt;li&gt;Exploratory visualization&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;context&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This assignment is about exploratory data analysis (EDA) and is based around a fivethirtyeight article that is a good example of it (under project button). EDA is about going through many question-answer cycles bridged by numerical summaries and visualizations of data. The first part of the assignment is to read the article while noting what kind of statistics and plots were chosen by the authors; the other part of the assignment will be to reproduce these and build on them.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Import&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Next, use dataset button to get data. I suggest creating a separate folder for this assignment and moving data there. Read &lt;a href=&#34;http://r4ds.had.co.nz/workflow-projects.html&#34;&gt;section of 8.4&lt;/a&gt; about setting up a project folder with RStudio which is a good practice in managing files.&lt;/p&gt;
&lt;p&gt;Open a new R markdown file by going &lt;code&gt;File -&amp;gt; New File -&amp;gt; R markdown&lt;/code&gt;. Once it opens, do &lt;code&gt;File -&amp;gt; Save As&lt;/code&gt; to save it to your folder. Assuming you have created the project folder and data is in it, to get data into R you need to run&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
df &amp;lt;- read_csv(&amp;quot;movie.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note the underscore (&lt;code&gt;_&lt;/code&gt;) in &lt;code&gt;read_csv&lt;/code&gt; and not the dot (&lt;code&gt;.&lt;/code&gt;)&lt;/strong&gt;. Type &lt;strong&gt;df&lt;/strong&gt; into console to test that data loaded properly and you should see the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,794 × 15
##     year      imdb                  title            test clean_test
## *  &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;
## 1   2013 tt1711425          21 &amp;amp;amp; Over          notalk     notalk
## 2   2012 tt1343727               Dredd 3D     ok-disagree         ok
## 3   2013 tt2024544       12 Years a Slave notalk-disagree     notalk
## 4   2013 tt1272878                 2 Guns          notalk     notalk
## 5   2013 tt0453562                     42             men        men
## 6   2013 tt1335975               47 Ronin             men        men
## 7   2013 tt1606378 A Good Day to Die Hard          notalk     notalk
## 8   2013 tt2194499             About Time     ok-disagree         ok
## 9   2013 tt1814621              Admission              ok         ok
## 10  2013 tt1815862            After Earth          notalk     notalk
## # ... with 1,784 more rows, and 10 more variables: binary &amp;lt;chr&amp;gt;,
## #   budget &amp;lt;int&amp;gt;, domgross &amp;lt;chr&amp;gt;, intgross &amp;lt;chr&amp;gt;, code &amp;lt;chr&amp;gt;,
## #   `budget_2013$` &amp;lt;int&amp;gt;, `domgross_2013$` &amp;lt;chr&amp;gt;, `intgross_2013$` &amp;lt;chr&amp;gt;,
## #   `period code` &amp;lt;int&amp;gt;, `decade code` &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, use &lt;code&gt;str(df)&lt;/code&gt; to see column names, what types of data you have in various columns and some example values. You should see the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    1794 obs. of  15 variables:
##  $ year          : int  2013 2012 2013 2013 2013 2013 2013 2013 2013 2013 ...
##  $ imdb          : chr  &amp;quot;tt1711425&amp;quot; &amp;quot;tt1343727&amp;quot; &amp;quot;tt2024544&amp;quot; &amp;quot;tt1272878&amp;quot; ...
##  $ title         : chr  &amp;quot;21 &amp;amp;amp; Over&amp;quot; &amp;quot;Dredd 3D&amp;quot; &amp;quot;12 Years a Slave&amp;quot; &amp;quot;2 Guns&amp;quot; ...
##  $ test          : chr  &amp;quot;notalk&amp;quot; &amp;quot;ok-disagree&amp;quot; &amp;quot;notalk-disagree&amp;quot; &amp;quot;notalk&amp;quot; ...
##  $ clean_test    : chr  &amp;quot;notalk&amp;quot; &amp;quot;ok&amp;quot; &amp;quot;notalk&amp;quot; &amp;quot;notalk&amp;quot; ...
##  $ binary        : chr  &amp;quot;FAIL&amp;quot; &amp;quot;PASS&amp;quot; &amp;quot;FAIL&amp;quot; &amp;quot;FAIL&amp;quot; ...
##  $ budget        : int  13000000 45000000 20000000 61000000 40000000 225000000 92000000 12000000 13000000 130000000 ...
##  $ domgross      : chr  &amp;quot;25682380&amp;quot; &amp;quot;13414714&amp;quot; &amp;quot;53107035&amp;quot; &amp;quot;75612460&amp;quot; ...
##  $ intgross      : chr  &amp;quot;42195766&amp;quot; &amp;quot;40868994&amp;quot; &amp;quot;158607035&amp;quot; &amp;quot;132493015&amp;quot; ...
##  $ code          : chr  &amp;quot;2013FAIL&amp;quot; &amp;quot;2012PASS&amp;quot; &amp;quot;2013FAIL&amp;quot; &amp;quot;2013FAIL&amp;quot; ...
##  $ budget_2013$  : int  13000000 45658735 20000000 61000000 40000000 225000000 92000000 12000000 13000000 130000000 ...
##  $ domgross_2013$: chr  &amp;quot;25682380&amp;quot; &amp;quot;13611086&amp;quot; &amp;quot;53107035&amp;quot; &amp;quot;75612460&amp;quot; ...
##  $ intgross_2013$: chr  &amp;quot;42195766&amp;quot; &amp;quot;41467257&amp;quot; &amp;quot;158607035&amp;quot; &amp;quot;132493015&amp;quot; ...
##  $ period code   : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ decade code   : int  1 1 1 1 1 1 1 1 1 1 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Understanding symbols in the names and types of data in each column is essential for the data cleaning task. Read the output of &lt;code&gt;str(df)&lt;/code&gt; line by line where you see a pattern summarising each variable like this: &lt;code&gt;$ variable name    : data type    possible values&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-cleaning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data cleaning&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Next, we should clean up a few names and types using dplyr functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;rename&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt; to remove &lt;strong&gt;$&lt;/strong&gt; and empty spaces from variables that have them. You will need to use backsticks &lt;strong&gt;`&lt;/strong&gt;, located in the upper left of your keyboard (not single or double quotes) to capture the bad names. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- rename(df, budget_2013 = `budget_2013$`, period_code = `period code`)&lt;/code&gt;&lt;/pre&gt;
to have proper syntax for rename. Assign the data frame with new names to &lt;strong&gt;df&lt;/strong&gt; or with some other name, like &lt;strong&gt;df_renamed&lt;/strong&gt;. Note that you can rename multiple variables by separating &lt;code&gt;new name = old name&lt;/code&gt; with commas.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After correcting names, we need to also fix data types. Output of &lt;code&gt;str(df)&lt;/code&gt; shows that, say &lt;strong&gt;budget_2013$&lt;/strong&gt;, has type &lt;code&gt;chr&lt;/code&gt; which stands for &lt;strong&gt;character&lt;/strong&gt; and represents text data. Use &lt;code&gt;mutate&lt;/code&gt; from dplyr and &lt;code&gt;as.double&lt;/code&gt; to convert all variables that are by their nature numerical, but are stored as text. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- mutate(df, domgross = as.double(domgross), intgross = as.double(intgross))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;mutate&lt;/code&gt; can also take multiple type conversion arguments &lt;code&gt;var_name = as.double(var_name)&lt;/code&gt; separated with commas. Also, note that renaming and type correction has to be saved as a separate data frame otherwise your results are calculated, but never saved and will not be available to other code, like when you need to calculate statistics. Save the full cleaned dataset as you will need it for calculations and a visualization.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;test-and-budget-statistics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Test and Budget Statistics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now, lets get some basic information about movies and budget:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calculate percentage of movies passing the test in the period of 1970 - 1980 using &lt;strong&gt;clean_test&lt;/strong&gt; variable, that has a value of &lt;code&gt;ok&lt;/code&gt; which stands for passing the test. Use &lt;code&gt;count&lt;/code&gt; function from dplyr to get you started and basic arithmetic for the rest. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count(filter(df, year &amp;lt;= 1980), clean_test)&lt;/code&gt;&lt;/pre&gt;
Is the number below 50%? Do the same calculation but for 2000 - 2010. How did the number change?&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switching to budget, first filter out all movies from 1990 - 2013 from your data and save as an intermediate result using &lt;code&gt;&amp;lt;-&lt;/code&gt;, for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_filtered &amp;lt;- filter(df, year &amp;gt;= 1990)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, calculate inflation-adjusted median budget for all movies and also separate medians for each unique value of &lt;strong&gt;clean_test&lt;/strong&gt; variable using &lt;code&gt;group_by&lt;/code&gt; function from dplyr. Use variable &lt;code&gt;budget_2013&lt;/code&gt; to get the correct numbers. For example, without grouping,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;summarise(df, med_budget = median(budget_2013, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and with grouping,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;summarise(group_by(df, year), med_budget = median(budget_2013, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How do group-specific medians compare to the overall median? Do author’s explanations provide a satisfying explanation of these numbers or do you have some additional factors you have in mind? Note you may get a warning about missing values; you can remove missing values during calculation by adding &lt;code&gt;na.rm = TRUE&lt;/code&gt; to median, as shown above in the code example. Save this table as you will need for later visualization.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;sales-statistics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Sales Statistics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Next, we will look at returns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lets add a few new variables to &lt;code&gt;df&lt;/code&gt; using &lt;code&gt;mutate&lt;/code&gt; from dplyr. Note that &lt;strong&gt;intgross&lt;/strong&gt; stands for worldwide gross sales. Add variables that represent international only gross sales, worldwide return, international return, and domestic return on investment, in 2013 dollars. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- mutate(df, domreturn = (domgross_2013 - budget_2013) / budget_2013 * 100)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Summarise returns by calculating median total return and median total returns grouped by outcome of Bechdel test as shown by &lt;strong&gt;clean_test&lt;/strong&gt;. Here you will need &lt;code&gt;summarise&lt;/code&gt; and &lt;code&gt;group_by&lt;/code&gt; from dplyr, similar to budget calculations above; also dont forget to handle missing values when calculating the median. What pattern do you see?&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, select international only gross in 2013 dollars and &lt;strong&gt;clean_test&lt;/strong&gt; variables followed by creating a new variable with a single value of “international”. You also need to rename the return variables in both new data frames with a common name in the &lt;code&gt;select&lt;/code&gt; function, as shown below. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_new1 &amp;lt;- mutate(select(df, return = intreturn_2013_only, clean_test), market = &amp;quot;international&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save this as a separate data frame. Repeat the same computations to create a data frame for “domestic” market with domestic return variable in 2013 dollars, and then combine the two into a new data frame using &lt;code&gt;bind_rows&lt;/code&gt; from dplyr (here you had to name the new variables with the same name, say market). Example is this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_new &amp;lt;- bind_rows(df_new1, df_new2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculate median gross sales for combination of clean_test result and origin of sales by using both variables for grouping. Here you need two variables for &lt;code&gt;group_by&lt;/code&gt; function from dplyr like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;group_by(df_new, clean_test, market)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;,and of course you will need &lt;code&gt;summarise&lt;/code&gt; to calculate medians of return variable and probably take care of missing values with &lt;code&gt;na.rm = TRUE&lt;/code&gt;. Save this table with medians as you will need it for later visualization. What can you say about relation of passing the test and market on returns?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Visualizations&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The last part of the assignment is to roughly reproduce the charts in the article.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We start with the stacked bar chart from the article (Chart 1 in the article). First, take the full cleaned data frame you made in &lt;strong&gt;Data cleaning&lt;/strong&gt;, and add a new variable representing 5 year periods. To accomplish this, load &lt;code&gt;ggplot2&lt;/code&gt; with &lt;code&gt;library&lt;/code&gt; function and use &lt;code&gt;cut_width(year, width = 5, boundary = 1970)&lt;/code&gt; inside &lt;code&gt;mutate&lt;/code&gt; from dplyr to create a new variable, for example called year_interval. Then use &lt;code&gt;ggplot2&lt;/code&gt; to create a rough plot; all I want to see is stacked bars for each year period where each bar represents one of the possible values of clean_test. Hint: play with fill aesthetic and position argument. Read over help file for &lt;code&gt;geom_bar&lt;/code&gt;. Here is an example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)
ggplot(df_plot1, aes(x = year_interval, fill = clean_test)) +   
  geom_bar(position = &amp;quot;fill&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the median budget chart from the article (Chart 2 in the article). Use summary data from &lt;strong&gt;Test and Budget Statistics&lt;/strong&gt; section that you saved as an intermediate result when you applied a filter to obtain data from 1990 - 2013 years (second bullet point). Hint: remember about coordinate system to figure out the flipping of bars. Here is an example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(df_plot2, aes(clean_test, median_budget_2013)) + 
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, use data build with &lt;code&gt;bind_rows&lt;/code&gt; from &lt;strong&gt;Sales Statistics&lt;/strong&gt; section to make the chart from the article about returns by market and test result. (Based on Chart 3 in the article) Hint: faceting will be helpful here. Here is an example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(df_plot3, aes(x = clean_test, y = median_return_2013)) + 
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  coord_flip() +
  facet_wrap(~market) &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can try installing with &lt;code&gt;install.packages(&amp;quot;ggthemes&amp;quot;)&lt;/code&gt; and then loading with &lt;code&gt;library(ggthemes)&lt;/code&gt; a themes package to experiment with how your plots look by adding &lt;code&gt;+ theme_fivethirtyeight()&lt;/code&gt; or some other theme to your ggplot code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-challenge&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Extra challenge&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Fivethirtyeight article arrived at certain conclusions based on the movie data. Come up either with one new summary calculation or one new visualization that will support or challenge their findings.&lt;/p&gt;
&lt;p&gt;Remember to place all your results in R markdown, and then email me the Rmarkdown. Good luck!&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Deep Analysis</title>
      <link>/project/analysis/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/analysis/</guid>
      <description>&lt;p&gt;Details to be determined.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R Package</title>
      <link>/project/package/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/package/</guid>
      <description>&lt;p&gt;Details to be determined.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shiny Web Application</title>
      <link>/project/shiny/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/shiny/</guid>
      <description>&lt;p&gt;Details to be determined.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Website is Online</title>
      <link>/post/welcome/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/welcome/</guid>
      <description>&lt;p&gt;Greetings Students!&lt;/p&gt;

&lt;p&gt;We will use this website for information about the course and any news that is longer than appropriate for an email. Here you will find the syllabus, assignments, projects, news items and ways of contacting me.&lt;/p&gt;

&lt;p&gt;I am looking forward to discussing the exciting field of data science with you and teaching you its practical aspects 😄&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
